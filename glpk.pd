our $VERSION = '0.03';
pp_setversion($VERSION);
$VERSION = eval $VERSION;

use PDL::Exporter;
use PDL::Types qw(ppdefs_all);

pp_addhdr(<<'EOD');
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <glpk.h>
#include "glpk_aio.h"

#define PAR_INT IV
#define PAR_DOUBLE NV
#define PAR_STR PV_nolen 
#define PAR_T(t) Sv ## t

#define SETPARM(sv, key, struc, type, default) { \
		SV **entry = hv_fetch(sv, #key, strlen(#key), 0); \
		struc.key = (entry != NULL && SvOK(*entry)) ? \
			PAR_T(type)(*entry) : \
			default; \
	}

typedef HV* param_t;

int glpk (int sense, int n, int m, double *c, int nz, int *rn, int *cn,
      double *a, double *b, int *ctype, int *freeLB, double *lb,
      int *freeUB, double *ub, int *vartype, int isMIP,
	  const control_params *par, double *xmin, double *fmin, int *status,
      double *lambda, double *redcosts, double *time,
	  void (*glpk_warn)(const char *,...), int seq);

static const char *glpk_err[] = {
	"glpk: no error",
	"glpk: invalid basis",
	"glpk: singular matrix",
	"glpk: ill-conditioned matrix",
	"glpk: invalid bounds",
	"glpk: solver failed",
	"glpk: objective lower limit reached",
	"glpk: objective upper limit reached",
	"glpk: iteration limit exceeded",
	"glpk: time limit exceeded",
	"glpk: no primal feasible solution",
	"glpk: no dual feasible solution",
	"glpk: root LP optimum not provided",
	"glpk: search terminated by application",
	"glpk: relative mip gap tolerance reached",
	"glpk: no primal/dual feasible solution",
	"glpk: no convergence",
	"glpk: numerical instability",
	"glpk: invalid data",
	"glpk: result out of range",
};

EOD

pp_addpm({At => 'Top'}, <<'EOD');
use strict;
use warnings;

use constant GLP_MIN => 1;
use constant GLP_MAX => 2;

use constant GLP_CV => 1;
use constant GLP_IV => 2;
use constant GLP_BV => 3;

use constant GLP_FR => 1;
use constant GLP_LO => 2;
use constant GLP_UP => 3;
use constant GLP_DB => 4;
use constant GLP_FX => 5;

use constant GLP_MSG_OFF => 0;
use constant GLP_MSG_ERR => 1;
use constant GLP_MSG_ON => 2;
use constant GLP_MSG_ALL => 3;
use constant GLP_MSG_DBG => 4;

use constant GLP_SF_GM => 1;
use constant GLP_SF_EQ => 16;
use constant GLP_SF_2N => 32;
use constant GLP_SF_SKIP => 64;
use constant GLP_SF_AUTO => 128;

use constant GLP_CV => 1;
use constant GLP_IV => 2;
use constant GLP_BV => 3;

use constant GLP_MSG_OFF => 0;
use constant GLP_MSG_ERR => 1;
use constant GLP_MSG_ON => 2;
use constant GLP_MSG_ALL => 3;
use constant GLP_MSG_DBG => 4;

use constant GLP_PRIMAL => 1;
use constant GLP_DUALP => 2;
use constant GLP_DUAL => 3;

use constant GLP_PT_STD => 0x11;
use constant GLP_PT_PSE => 0x22;

use constant GLP_BR_FFV => 1;
use constant GLP_BR_LFV => 2;
use constant GLP_BR_MFV => 3;
use constant GLP_BR_DTH => 4;
use constant GLP_BR_PCH => 5;

use constant GLP_BT_DFS => 1;
use constant GLP_BT_BFS => 2;
use constant GLP_BT_BLB => 3;
use constant GLP_BT_BPH => 4;

use constant GLP_RT_STD => 0x11;
use constant GLP_RT_HAR => 0x22;
use constant GLP_RT_FLIP => 0x33;

use constant GLP_UNDEF => 1;
use constant GLP_FEAS => 2;
use constant GLP_INFEAS => 3;
use constant GLP_NOFEAS => 4;
use constant GLP_OPT => 5;
use constant GLP_UNBND => 6;

BEGIN {
	our $keys = join '|', qw(msglev dual price itlim outfrq branch
	btrack presol rtest tmlim outdly tolbnd toldj tolpiv objll objul
	tolint tolobj scale lpsolver save_pb save_fn);
}

EOD

pp_add_exported(qw(GLP_MIN GLP_MAX GLP_CV GLP_IV GLP_BV GLP_FR GLP_LO
    GLP_UP GLP_DB GLP_FX GLP_MSG_OFF GLP_MSG_ERR GLP_MSG_ON GLP_MSG_ALL
    GLP_SF_GM GLP_SF_EQ GLP_SF_2N GLP_SF_SKIP GLP_SF_AUTO GLP_CV GLP_IV
    GLP_BV GLP_MSG_OFF GLP_MSG_ERR GLP_MSG_ON GLP_MSG_ALL GLP_MSG_DBG
    GLP_PRIMAL GLP_DUALP GLP_DUAL GLP_PT_STD GLP_PT_PSE GLP_BR_FFV
    GLP_BR_LFV GLP_BR_MFV GLP_BR_DTH GLP_BR_PCH GLP_BT_DFS GLP_BT_BFS
    GLP_BT_BLB GLP_BT_BPH GLP_RT_STD GLP_RT_HAR GLP_RT_FLIP 
    GLP_UNDEF GLP_FEAS GLP_INFEAS GLP_NOFEAS GLP_OPT GLP_UNBND));

pp_bless('PDL::Opt::GLPK');

pp_add_typemaps(string => <<'EOD');
TYPEMAP: <<END_OF_TYPEMAP
TYPEMAP
param_t T_PARAM_T

INPUT
T_PARAM_T
  $var = ($type)SvRV($arg)

OUTPUT
T_PARAM_T
  sv_setsv($arg, newRV_inc((SV*) $var));

END_OF_TYPMAP
EOD

pp_def('glpk',
	Pars => 'double c(m);
			int rn(nz);
			int cn(nz);
			double a(nz);
			double b(n);
			double lb(m);
			double ub(m);
			int ctype(n);
			int vartype(m);
			int sense();
			int [t]freeLB(m);
			int [t]freeUB(m);
			double [o]xopt(m);
			double [o]fopt();
			int [o]status();
			double [o]lambda(n);
			double [o]redcosts(n);',
	OtherPars => 'param_t param;',
	GenericTypes => ['D'],
	PMCode => q{
		sub PDL::Opt::GLPK::glpk {
			my $parms = ref($_[-1]) eq 'HASH' ? pop @_ : {};
			push @_, null if @_ == 11;
			push @_, null if @_ == 12;
			barf("param is not a hash ref") if @_ == 14;
			barf("argument(s) missing") if @_ < 13;
			push @_, $parms;
			our $keys;
			my @unknown = grep !/^(?:$keys)$/, keys %{$_[13]};
			barf("parameter invalid: @unknown") if @unknown;
			barf("cannot broadcast over 'a'") if $_[1]->ndims > 2;
			my $at = $_[1]->xchg(0, 1);
			my $a = pdl(0)->append($at->isa('PDL::CCS::Nd') ?
				$at->[$PDL::CCS::Nd::VALS]->slice('0:-2') :
				$at->where($at));
			my $nnz = $a->nelem;
			my $w = $at->whichND;
			my $rn = zeroes($nnz);
			my $cn = zeroes($nnz);
			$rn->slice('1:-1') .= $w->slice('(0)') + 1;
			$cn->slice('1:-1') .= $w->slice('(1)') + 1;

			PDL::Opt::GLPK::_glpk_int($_[0], $rn, $cn, $a, @_[2..$#_]);
		}
	},
	Code => q{
			/*
			 * This code was ported from Octave sources in
			 * libinterp/dldfcn/__glpk__.cc
			 */
			int n = $SIZE(n);
			int m = $SIZE(m);
			int nz = $SIZE(nz) - 1;
			control_params par;
			double time;
			void (*glpk_warn)(const char *,...) = warn;
			param_t param = $COMP(param);

			SETPARM(param, msglev, par, PAR_INT, 1);
			if (par.msglev < 0 || par.msglev > 4)
				$CROAK("PARAM.msglev must be 0 (no output) or 1 (error and warning messages only [default]) or 2 (normal output) or 3 (full output)");

			SETPARM(param, scale, par, PAR_INT, 16);
			if (par.scale < 0 || par.scale > 128)
				$CROAK("PARAM.scale must either be 128 (automatic selection of scaling options), or a bitwise or of: 1 (geometric mean scaling), 16 (equilibration scaling), 32 (round scale factors to power of two), 64 (skip if problem is well scaled");

			SETPARM(param, dual, par, PAR_INT, 1);
			if (par.dual < 1 || par.dual > 3)
				$CROAK("PARAM.dual must be 1 (use two-phase primal simplex [default]) or 2 (use two-phase dual simplex) or 3 (use two-phase dual simplex, and if it fails, switch to the primal simplex)");

			SETPARM(param, price, par, PAR_INT, 34);
			if (par.price != 17 && par.price != 34)
				$CROAK("PARAM.price must be 17 (textbook pricing) or 34 (steepest edge pricing [default])");

			SETPARM(param, itlim, par, PAR_INT, INT_MAX);
			SETPARM(param, outfrq, par, PAR_INT, 200);
			SETPARM(param, branch, par, PAR_INT, 4);
			if (par.branch < 1 || par.branch > 5)
				$CROAK("PARAM.branch must be 1 (first fractional variable) or 2 (last fractional variable) or 3 (most fractional variable) or 4 (heuristic by Driebeck and Tomlin [default]) or 5 (hybrid pseudocost heuristic)");

			SETPARM(param, btrack, par, PAR_INT, 4);
			if (par.btrack < 1 || par.btrack > 4)
				$CROAK("PARAM.btrack must be 1 (depth first search) or 2 (breadth first search) or 3 (best local bound) or 4 (best projection heuristic [default]");

			SETPARM(param, presol, par, PAR_INT, 1);
			if (par.presol < 0 || par.presol > 1)
				$CROAK("PARAM.presol must be 0 (do NOT use LP presolver) or 1 (use LP presolver [default])");

			SETPARM(param, lpsolver, par, PAR_INT, 1);
			if (par.lpsolver < 1 || par.lpsolver > 2)
				$CROAK("PARAM.lpsolver must be 1 (simplex method) or 2 (interior point method)");

			SETPARM(param, rtest, par, PAR_INT, 34);
			if (par.rtest != 17 && par.rtest != 34)
				$CROAK("PARAM.rtest must be 17 (standard ratio test) or 34 (Harris' two-pass ratio test [default])");

			SETPARM(param, tmlim, par, PAR_INT, INT_MAX);
			SETPARM(param, outdly, par, PAR_INT, 0);
			SETPARM(param, save_pb, par, PAR_INT, 0);
			SETPARM(param, save_fn, par, PAR_STR, "outpb.%d.lp");
			SETPARM(param, tolbnd, par, PAR_DOUBLE, 1e-7);
			SETPARM(param, toldj, par, PAR_DOUBLE, 1e-7);
			SETPARM(param, tolpiv, par, PAR_DOUBLE, 1e-10);
			SETPARM(param, objll, par, PAR_DOUBLE, INFINITY);
			SETPARM(param, objul, par, PAR_DOUBLE, -INFINITY);
			SETPARM(param, tolint, par, PAR_DOUBLE, 1e-5);
			SETPARM(param, tolobj, par, PAR_DOUBLE, 1e-7);


			int seq = 0;

			broadcastloop %{

				int isMIP = 0;
				loop(m) %{
					$freeLB() = ($lb() == -INFINITY);
					$freeUB() = ($ub() == INFINITY);
					if ($vartype() > GLP_CV) {
						isMIP = 1;
					}
				%}

				int errnum;
				errnum = glpk($sense(), m, n, $P(c), nz, $P(rn), $P(cn),
					$P(a), $P(b), $P(ctype), $P(freeLB), $P(lb), $P(freeUB),
					$P(ub), $P(vartype), isMIP, &par, $P(xopt), $P(fopt),
					$P(status), $P(lambda), $P(redcosts), &time, warn, seq++);
				
				if (errnum) {
					PDL_err.error = PDL_EUSERERROR;
					PDL_err.message = glpk_err[errnum];
					return PDL_err;
				}
			%}

			return PDL_err;
	},
	Doc => undef
);

pp_done();  # you will need this to finish pp processing

__DATA__
=head1 NAME

PDL::Opt::GLPK - PDL interface to the GNU Linear Programming Kit
